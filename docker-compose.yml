services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  app-dev:
    build:
      context: .
      target: development
    profiles: [ "dev" ]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      NODE_ENV: development
    stdin_open: true
    tty: true
    ports:
      - "3000:3000"
      - "5555:5555"  # Prisma Studio
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.build.json:/app/tsconfig.build.json
      - ./nest-cli.json:/app/nest-cli.json
    command: sh -c "pnpm prisma:generate && pnpm prisma:migrate:deploy && pnpm start:dev"

  app-prod:
    build:
      context: .
      target: production
    profiles: [ "prod" ]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      NODE_ENV: production
    stdin_open: true
    tty: true
    ports:
      - "3000:3000"
    command: sh -c "pnpm prisma:migrate:deploy && node dist/main.js"

volumes:
  db-data:
  redis-data: